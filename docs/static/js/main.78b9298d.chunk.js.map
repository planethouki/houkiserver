{"version":3,"sources":["ServerQuery.js","TopPlayers.js","App.js","serviceWorker.js","index.js"],"names":["ServerQuery","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","title","react_default","a","createElement","state","error","isLoaded","data","version","players","_this2","fetch","then","res","json","result","setState","_this$state","message","id","name","online","max","React","Component","TopPlayers","totalLevelPlayers","totalLevelValues","totalLevel","map","item","playerName","level","index_es","variant","variantMapping","style","fontSize","index","key","DYNMAP_URL","theme","createMuiTheme","typography","useNextVariants","palette","primary","main","secondary","status","danger","styles","appBar","position","heroUnit","backgroundColor","background","paper","heroContent","maxWidth","margin","padding","concat","spacing","unit","heroButtons","marginTop","heroDescription","textAlign","heroRanking","heroBanners","w100","width","withStyles","classes","Fragment","CssBaseline_default","AppBar_default","className","Toolbar_default","Typography_default","color","noWrap","component","align","gutterBottom","paragraph","Grid_default","container","justify","Button_default","href","target","ServerQuery_ServerQuery","TopPlayers_TopPlayers","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78b9298d.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class ServerQuery extends React.Component {\n\n    title = (<h3>基本情報</h3>)\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            data: {\n                version: null,\n                players: null\n            },\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://houkiserverquery.azurewebsites.net/\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        data: result\n                    });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, data } = this.state;\n        if (error) {\n            return <div>{this.title}Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>{this.title}Loading...</div>;\n        } else {\n            return (\n                <div>\n                    {this.title}\n                    <div>アドレス・・・houkiserver.com</div>\n                    <div>バージョン・・・<span id=\"version\">{data.version.name}</span></div>\n                    <div>ユーザー・・・<span id=\"login-players\">{data.players.online}</span>／<span id=\"max-players\">{data.players.max}</span></div>\n                </div>\n            );\n        }\n    }\n}\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\n\nexport default class TopPlayers extends React.Component {\n\n    title = (<h3>McMMOレベルランキング</h3>);\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            totalLevelPlayers: [],\n            totalLevelValues: []\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://houkiserverstats.z31.web.core.windows.net/mcmmo.json\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        totalLevelPlayers: result.totalLevel.map((item) => item.playerName),\n                        totalLevelValues: result.totalLevel.map((item) => item.level)\n                    });\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, totalLevelPlayers, totalLevelValues } = this.state;\n        if (error) {\n            return <div>{this.title}Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>{this.title}Loading...</div>;\n        } else {\n            return (\n                <div>\n                    {this.title}\n                    <Typography variant={'h5'} variantMapping={'span'}>\n                        &#x1F947;\n                        &nbsp;\n                        {totalLevelPlayers[0]}\n                        &nbsp;\n                        <span style={{fontSize: '60%'}}>({totalLevelValues[0]})</span>\n                    </Typography>\n                    <Typography variant={'h6'}>\n                        &#x1F948;\n                        &nbsp;\n                        {totalLevelPlayers[1]}\n                        &nbsp;\n                        <span style={{fontSize: '60%'}}>({totalLevelValues[1]})</span>\n                    </Typography>\n                    <Typography variant={'h6'}>\n                        &#x1F949;\n                        &nbsp;\n                        {totalLevelPlayers[2]}\n                        &nbsp;\n                        <span style={{fontSize: '60%'}}>({totalLevelValues[2]})</span>\n                    </Typography>\n                    {totalLevelPlayers.map((playerName, index) => {\n                        if (index < 3) return;\n                        return (\n                            <Typography key={playerName}>\n                                {playerName}\n                                &nbsp;\n                                <small>({totalLevelValues[index]})</small>\n                            </Typography>\n                        )\n                    })}\n                </div>\n            );\n        }\n    }\n}\n","import React from 'react';\nimport './App.css';\n\nimport ServerQuery from './ServerQuery';\nimport TopPlayers from './TopPlayers';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst DYNMAP_URL = \"https://houkiserver.com\";\n\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n    palette: {\n        primary: {\n            main: \"#EEFCCE\",\n        },\n        secondary: {\n            main: \"#C4B7CB\",\n        }\n    },\n    status: {\n        danger: 'orange',\n    },\n});\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    heroUnit: {\n        backgroundColor: theme.palette.background.paper,\n    },\n    heroContent: {\n        maxWidth: 600,\n        margin: '0 auto',\n        padding: `${theme.spacing.unit * 8}px 0 ${theme.spacing.unit * 6}px`,\n    },\n    heroButtons: {\n        padding: theme.spacing.unit,\n        marginTop: theme.spacing.unit * 4,\n    },\n    heroDescription: {\n        marginTop: theme.spacing.unit * 4,\n        textAlign: 'center'\n    },\n    heroRanking: {\n        textAlign: 'center'\n    },\n    heroBanners: {\n        marginTop: theme.spacing.unit * 4,\n    },\n    w100: {\n        width: '100%',\n    }\n};\n\nfunction App(props) {\n    const { classes } = props;\n    return (\n        <MuiThemeProvider theme={theme}>\n            <React.Fragment>\n                <CssBaseline />\n                <AppBar position=\"static\" className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                            ほうき鯖\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <main>\n                    <div className={classes.heroUnit}>\n                        <div className={classes.heroContent}>\n                            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n                                ほうき鯖\n                            </Typography>\n                            <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\n                                A Minecraft Server.\n                            </Typography>\n                            <div className={classes.heroButtons}>\n                                <Grid container spacing={16} justify=\"center\">\n                                    <Grid item>\n                                        <Button variant=\"contained\" color=\"primary\" href={DYNMAP_URL} target=\"_blank\">\n                                            dynmap\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                            <div className={classes.heroDescription}>\n                                <ServerQuery />\n                            </div>\n                            <div className={classes.heroRanking}>\n                                <TopPlayers />\n                            </div>\n                            <div className={classes.heroBanners}>\n                                <a href=\"https://minecraft.jp/servers/planethouki.ddns.net\" target=\"_blank\">\n                                    <img src=\"https://minecraft.jp/servers/planethouki.ddns.net/banner/1/560x95.png\" alt=\"\"  className={classes.w100} />\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                </main>\n            </React.Fragment>\n        </MuiThemeProvider>\n    );\n}\n\nApp.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}